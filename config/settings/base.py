"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
env = environ.Env()
env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # my apps
    'blog.apps.BlogConfig',
    'account.apps.AccountConfig',

    # third party apps
    'ckeditor',
    'crispy_forms',
    'crispy_bootstrap4',
]

MIDDLEWARE = [
    'log_request_id.middleware.RequestIDMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'account.custom_middleware.login_register.PreventAuthenticatedUsers'
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'



# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'Asia/Baku'

USE_I18N = True

USE_TZ = True

LANGUAGES = [ ('en', 'English'), ('az', 'Azerbaijan'), ('es', 'Español'), ('ru', 'Русский')]
LOCALE_PATHS = [BASE_DIR / 'locale', ]

CRISPY_TEMPLATE_PACK = 'bootstrap4'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


STATICFILES_DIRS = [
    BASE_DIR / "static",
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'account.CustomUserModel'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

LOGIN_URL = '/user/login'
LOGIN_REDIRECT_URL = 'home'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    'filters': {
        'request_id': {
            '()': 'log_request_id.filters.RequestIDFilter'
        }
    },
    "formatters":{
        "simple":{
            "format": "{asctime} - {levelname} - {name}- [%(request_id)s]- {message} -{filename} - {funcName} - {lineno}",
            "style": "{"
        },
        "json":{
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter",   # json configuration
            "format": "{asctime} {levelname} {name} [%(request_id)s] {message} {filename} {funcName} {lineno}",
            "style": "{"
        }
    },
    "handlers":{
            "console":{
                "class": "logging.StreamHandler",
                "formatter": "json",
                "filters": ["request_id"]
            },
            "file":{
                "class": "logging.FileHandler",
                "filename": "logs/all_logs.log",
                "formatter": "json",
                "filters": ["request_id"]
            }
        },
    "loggers": {
        "base": {
            "level": env("LOG_LEVEL"),
            "handlers": ["console", "file"]
        },
        # "error_logger": {
        #     "level": "ERROR"
        # }
    }
}


